@implements IDisposable

@inject NavigationManager NavigationManager

<input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
<label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
<nav class="sitenav" aria-labelledby="main-menu">
    <FluentNavMenu Id="main-menu" Collapsible="false" Title="Navigation menu" Expanded="true" CustomToggle="true">
        <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Home</FluentNavLink>
        <FluentNavLink Href="counter" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Add())" IconColor="Color.Accent">Counter</FluentNavLink>
        <FluentNavLink Href="weather" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.TimeAndWeather())" IconColor="Color.Accent">Weather</FluentNavLink>
    </FluentNavMenu>
</nav>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

